import { 
  collection, 
  doc, 
  setDoc, 
  getDoc, 
  getDocs, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  query, 
  where, 
  orderBy, 
  onSnapshot,
  serverTimestamp,
  Timestamp,
  limit
} from 'firebase/firestore';
import { db } from '../config/firebase';
import { 
  User, 
  Course, 
  Product, 
  AppSettings, 
  Notification, 
  WatchHistory, 
  Favorite, 
  Resource, 
  SupportTicket, 
  Banner, 
  FixedNotification, 
  UserSession, 
  SecurityLog 
} from '../types';

// Cole√ß√µes do Firestore
export const COLLECTIONS = {
  USERS: 'users',
  COURSES: 'courses',
  PRODUCTS: 'products',
  SETTINGS: 'settings',
  NOTIFICATIONS: 'notifications',
  WATCH_HISTORY: 'watchHistory',
  FAVORITES: 'favorites',
  RESOURCES: 'resources',
  SUPPORT_TICKETS: 'supportTickets',
  BANNERS: 'banners',
  FIXED_NOTIFICATIONS: 'fixedNotifications',
  USER_SESSIONS: 'userSessions',
  SECURITY_LOGS: 'securityLogs'
};

// Fun√ß√£o para converter timestamp do Firestore
const convertTimestamp = (timestamp: any) => {
  if (timestamp && timestamp.toDate) {
    return timestamp.toDate().toISOString();
  }
  return timestamp;
};

// Fun√ß√£o para converter dados do Firestore
const convertFirestoreData = (data: any) => {
  if (!data) return data;
  
  const converted = { ...data };
  
  // Converter timestamps
  Object.keys(converted).forEach(key => {
    if (converted[key] && typeof converted[key] === 'object' && converted[key].toDate) {
      converted[key] = convertTimestamp(converted[key]);
    }
  });
  
  return converted;
};

// Fun√ß√£o para gerar ID √∫nico
const generateId = () => {
  return Date.now().toString() + Math.random().toString(36).substr(2, 9);
};

// Inicializar dados padr√£o
export const initializeDefaultData = async () => {
  try {
    console.log('üîÑ Verificando dados padr√£o...');
    
    // Verificar se j√° existem configura√ß√µes
    const settingsRef = doc(db, COLLECTIONS.SETTINGS, 'main');
    const settingsSnap = await getDoc(settingsRef);
    
    if (!settingsSnap.exists()) {
      console.log('üìù Criando configura√ß√µes padr√£o...');
      // Criar configura√ß√µes padr√£o
      const defaultSettings: AppSettings = {
        whatsappNumber: '+5511999999999',
        socialLinks: {
          email: 'contato@exemplo.com',
          instagram: '@exemplo',
          whatsapp: '+5511999999999'
        },
        customizations: {
          primaryColor: '#e50914',
          logoText: 'MemberArea',
          logoUrl: '',
          faviconUrl: '',
          secondaryColor: '#6b7280'
        },
        helpCenter: {
          tutorialsUrl: '',
          supportHours: '24/7 dispon√≠vel'
        },
        security: {
          maxConcurrentSessions: 3,
          sessionTimeout: 480,
          blockOnMultipleIPs: false,
          allowedIPsPerUser: 5,
          suspiciousActivityThreshold: 3,
          enableGeoBlocking: false,
          allowedCountries: ['BR'],
          enableDeviceTracking: true,
          requireReauthOnNewDevice: false
        }
      };
      
      await setDoc(settingsRef, {
        ...defaultSettings,
        updatedAt: serverTimestamp()
      });
      
      console.log('‚úÖ Configura√ß√µes padr√£o criadas');
    }
    
    // Verificar se existe usu√°rio admin
    const usersQuery = query(
      collection(db, COLLECTIONS.USERS), 
      where('email', '==', 'member@gmail.com'),
      limit(1)
    );
    const usersSnap = await getDocs(usersQuery);
    
    if (usersSnap.empty) {
      console.log('üë§ Criando usu√°rio admin padr√£o...');
      // Criar usu√°rio admin padr√£o
      const adminUser: Omit<User, 'id'> = {
        email: 'member@gmail.com',
        password: 'member123#',
        name: 'Administrator',
        isAdmin: true,
        registrationDate: new Date().toISOString(),
        unlockedCourses: [],
        unlockedProducts: [],
        isBlocked: false
      };
      
      await setDoc(doc(db, COLLECTIONS.USERS, 'admin'), {
        ...adminUser,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });
      
      console.log('‚úÖ Usu√°rio admin criado');
    }
    
    console.log('‚úÖ Dados padr√£o verificados/criados com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao inicializar dados padr√£o:', error);
    throw error;
  }
};

// CRUD para Usu√°rios
export const userService = {
  async getAll(): Promise<User[]> {
    try {
      console.log('üë• Carregando usu√°rios...');
      const snapshot = await getDocs(collection(db, COLLECTIONS.USERS));
      const users = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as User));
      console.log(`‚úÖ ${users.length} usu√°rios carregados`);
      return users;
    } catch (error) {
      console.error('‚ùå Erro ao carregar usu√°rios:', error);
      return [];
    }
  },

  async getById(id: string): Promise<User | null> {
    try {
      const docRef = doc(db, COLLECTIONS.USERS, id);
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        return {
          id: docSnap.id,
          ...convertFirestoreData(docSnap.data())
        } as User;
      }
      return null;
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio:', error);
      return null;
    }
  },

  async create(user: Omit<User, 'id'>): Promise<string> {
    try {
      console.log('üë§ Criando usu√°rio:', user.name);
      const docRef = await addDoc(collection(db, COLLECTIONS.USERS), {
        ...user,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Usu√°rio criado com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error);
      throw error;
    }
  },

  async update(id: string, updates: Partial<User>): Promise<void> {
    try {
      console.log('üë§ Atualizando usu√°rio:', id);
      const docRef = doc(db, COLLECTIONS.USERS, id);
      await updateDoc(docRef, {
        ...updates,
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Usu√°rio atualizado');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar usu√°rio:', error);
      throw error;
    }
  },

  async delete(id: string): Promise<void> {
    try {
      console.log('üë§ Deletando usu√°rio:', id);
      await deleteDoc(doc(db, COLLECTIONS.USERS, id));
      console.log('‚úÖ Usu√°rio deletado');
    } catch (error) {
      console.error('‚ùå Erro ao deletar usu√°rio:', error);
      throw error;
    }
  }
};

// CRUD para Cursos
export const courseService = {
  async getAll(): Promise<Course[]> {
    try {
      console.log('üìö Carregando cursos...');
      const snapshot = await getDocs(collection(db, COLLECTIONS.COURSES));
      const courses = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as Course));
      console.log(`‚úÖ ${courses.length} cursos carregados`);
      return courses;
    } catch (error) {
      console.error('‚ùå Erro ao carregar cursos:', error);
      return [];
    }
  },

  async create(course: Omit<Course, 'id'>): Promise<string> {
    try {
      console.log('üìö Criando curso:', course.title);
      const docRef = await addDoc(collection(db, COLLECTIONS.COURSES), {
        ...course,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Curso criado com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar curso:', error);
      throw error;
    }
  },

  async update(id: string, updates: Partial<Course>): Promise<void> {
    try {
      console.log('üìö Atualizando curso:', id);
      const docRef = doc(db, COLLECTIONS.COURSES, id);
      await updateDoc(docRef, {
        ...updates,
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Curso atualizado');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar curso:', error);
      throw error;
    }
  },

  async delete(id: string): Promise<void> {
    try {
      console.log('üìö Deletando curso:', id);
      await deleteDoc(doc(db, COLLECTIONS.COURSES, id));
      console.log('‚úÖ Curso deletado');
    } catch (error) {
      console.error('‚ùå Erro ao deletar curso:', error);
      throw error;
    }
  }
};

// CRUD para Produtos
export const productService = {
  async getAll(): Promise<Product[]> {
    try {
      console.log('üì¶ Carregando produtos...');
      const snapshot = await getDocs(collection(db, COLLECTIONS.PRODUCTS));
      const products = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as Product));
      console.log(`‚úÖ ${products.length} produtos carregados`);
      return products;
    } catch (error) {
      console.error('‚ùå Erro ao carregar produtos:', error);
      return [];
    }
  },

  async create(product: Omit<Product, 'id'>): Promise<string> {
    try {
      console.log('üì¶ Criando produto:', product.title);
      const docRef = await addDoc(collection(db, COLLECTIONS.PRODUCTS), {
        ...product,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Produto criado com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar produto:', error);
      throw error;
    }
  },

  async update(id: string, updates: Partial<Product>): Promise<void> {
    try {
      console.log('üì¶ Atualizando produto:', id);
      const docRef = doc(db, COLLECTIONS.PRODUCTS, id);
      await updateDoc(docRef, {
        ...updates,
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Produto atualizado');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar produto:', error);
      throw error;
    }
  },

  async delete(id: string): Promise<void> {
    try {
      console.log('üì¶ Deletando produto:', id);
      await deleteDoc(doc(db, COLLECTIONS.PRODUCTS, id));
      console.log('‚úÖ Produto deletado');
    } catch (error) {
      console.error('‚ùå Erro ao deletar produto:', error);
      throw error;
    }
  }
};

// CRUD para Configura√ß√µes
export const settingsService = {
  async get(): Promise<AppSettings | null> {
    try {
      console.log('‚öôÔ∏è Carregando configura√ß√µes...');
      const docRef = doc(db, COLLECTIONS.SETTINGS, 'main');
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        const settings = convertFirestoreData(docSnap.data()) as AppSettings;
        console.log('‚úÖ Configura√ß√µes carregadas');
        return settings;
      }
      console.log('‚ö†Ô∏è Configura√ß√µes n√£o encontradas');
      return null;
    } catch (error) {
      console.error('‚ùå Erro ao carregar configura√ß√µes:', error);
      return null;
    }
  },

  async update(settings: Partial<AppSettings>): Promise<void> {
    try {
      console.log('‚öôÔ∏è Atualizando configura√ß√µes...');
      const docRef = doc(db, COLLECTIONS.SETTINGS, 'main');
      await updateDoc(docRef, {
        ...settings,
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Configura√ß√µes atualizadas');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar configura√ß√µes:', error);
      throw error;
    }
  }
};

// CRUD para Notifica√ß√µes
export const notificationService = {
  async getAll(): Promise<Notification[]> {
    try {
      console.log('üîî Carregando notifica√ß√µes...');
      const q = query(
        collection(db, COLLECTIONS.NOTIFICATIONS),
        orderBy('createdAt', 'desc'),
        limit(100) // Limitar para evitar sobrecarga
      );
      const snapshot = await getDocs(q);
      const notifications = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as Notification));
      console.log(`‚úÖ ${notifications.length} notifica√ß√µes carregadas`);
      return notifications;
    } catch (error) {
      console.error('‚ùå Erro ao carregar notifica√ß√µes:', error);
      return [];
    }
  },

  async getByUserId(userId: string): Promise<Notification[]> {
    try {
      const q = query(
        collection(db, COLLECTIONS.NOTIFICATIONS),
        where('userId', '==', userId),
        orderBy('createdAt', 'desc'),
        limit(50)
      );
      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as Notification));
    } catch (error) {
      console.error('‚ùå Erro ao carregar notifica√ß√µes do usu√°rio:', error);
      return [];
    }
  },

  async create(notification: Omit<Notification, 'id'>): Promise<string> {
    try {
      console.log('üîî Criando notifica√ß√£o:', notification.title);
      const docRef = await addDoc(collection(db, COLLECTIONS.NOTIFICATIONS), {
        ...notification,
        createdAt: serverTimestamp()
      });
      console.log('‚úÖ Notifica√ß√£o criada com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar notifica√ß√£o:', error);
      throw error;
    }
  },

  async update(id: string, updates: Partial<Notification>): Promise<void> {
    try {
      console.log('üîî Atualizando notifica√ß√£o:', id);
      const docRef = doc(db, COLLECTIONS.NOTIFICATIONS, id);
      await updateDoc(docRef, updates);
      console.log('‚úÖ Notifica√ß√£o atualizada');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar notifica√ß√£o:', error);
      throw error;
    }
  },

  async delete(id: string): Promise<void> {
    try {
      console.log('üîî Deletando notifica√ß√£o:', id);
      await deleteDoc(doc(db, COLLECTIONS.NOTIFICATIONS, id));
      console.log('‚úÖ Notifica√ß√£o deletada');
    } catch (error) {
      console.error('‚ùå Erro ao deletar notifica√ß√£o:', error);
      throw error;
    }
  }
};

// CRUD para Hist√≥rico de Visualiza√ß√£o
export const watchHistoryService = {
  async getAll(): Promise<WatchHistory[]> {
    try {
      console.log('üì∫ Carregando hist√≥rico...');
      const q = query(
        collection(db, COLLECTIONS.WATCH_HISTORY),
        orderBy('lastWatchedAt', 'desc')
      );
      const snapshot = await getDocs(q);
      const history = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as WatchHistory));
      console.log(`‚úÖ ${history.length} registros de hist√≥rico carregados`);
      return history;
    } catch (error) {
      console.error('‚ùå Erro ao carregar hist√≥rico:', error);
      return [];
    }
  },

  async getByUserId(userId: string): Promise<WatchHistory[]> {
    try {
      const q = query(
        collection(db, COLLECTIONS.WATCH_HISTORY),
        where('userId', '==', userId),
        orderBy('lastWatchedAt', 'desc')
      );
      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as WatchHistory));
    } catch (error) {
      console.error('‚ùå Erro ao carregar hist√≥rico do usu√°rio:', error);
      return [];
    }
  },

  async createOrUpdate(history: Omit<WatchHistory, 'id'>): Promise<void> {
    try {
      console.log('üì∫ Criando/atualizando hist√≥rico...');
      
      // Verificar se j√° existe um registro para este usu√°rio e conte√∫do
      const q = query(
        collection(db, COLLECTIONS.WATCH_HISTORY),
        where('userId', '==', history.userId),
        where(history.courseId ? 'courseId' : 'productId', '==', history.courseId || history.productId),
        limit(1)
      );
      
      const snapshot = await getDocs(q);
      
      if (!snapshot.empty) {
        // Atualizar registro existente
        const docRef = snapshot.docs[0].ref;
        await updateDoc(docRef, {
          ...history,
          lastWatchedAt: serverTimestamp()
        });
        console.log('‚úÖ Hist√≥rico atualizado');
      } else {
        // Criar novo registro
        await addDoc(collection(db, COLLECTIONS.WATCH_HISTORY), {
          ...history,
          firstWatchedAt: serverTimestamp(),
          lastWatchedAt: serverTimestamp()
        });
        console.log('‚úÖ Hist√≥rico criado');
      }
    } catch (error) {
      console.error('‚ùå Erro ao criar/atualizar hist√≥rico:', error);
      throw error;
    }
  }
};

// CRUD para Favoritos
export const favoriteService = {
  async getAll(): Promise<Favorite[]> {
    try {
      console.log('‚ù§Ô∏è Carregando favoritos...');
      const q = query(
        collection(db, COLLECTIONS.FAVORITES),
        orderBy('addedAt', 'desc')
      );
      const snapshot = await getDocs(q);
      const favorites = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as Favorite));
      console.log(`‚úÖ ${favorites.length} favoritos carregados`);
      return favorites;
    } catch (error) {
      console.error('‚ùå Erro ao carregar favoritos:', error);
      return [];
    }
  },

  async getByUserId(userId: string): Promise<Favorite[]> {
    try {
      const q = query(
        collection(db, COLLECTIONS.FAVORITES),
        where('userId', '==', userId),
        orderBy('addedAt', 'desc')
      );
      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as Favorite));
    } catch (error) {
      console.error('‚ùå Erro ao carregar favoritos do usu√°rio:', error);
      return [];
    }
  },

  async create(favorite: Omit<Favorite, 'id'>): Promise<string> {
    try {
      console.log('‚ù§Ô∏è Criando favorito...');
      const docRef = await addDoc(collection(db, COLLECTIONS.FAVORITES), {
        ...favorite,
        addedAt: serverTimestamp()
      });
      console.log('‚úÖ Favorito criado com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar favorito:', error);
      throw error;
    }
  },

  async delete(id: string): Promise<void> {
    try {
      console.log('‚ù§Ô∏è Deletando favorito:', id);
      await deleteDoc(doc(db, COLLECTIONS.FAVORITES, id));
      console.log('‚úÖ Favorito deletado');
    } catch (error) {
      console.error('‚ùå Erro ao deletar favorito:', error);
      throw error;
    }
  }
};

// CRUD para Recursos
export const resourceService = {
  async getAll(): Promise<Resource[]> {
    try {
      console.log('üìÅ Carregando recursos...');
      const snapshot = await getDocs(collection(db, COLLECTIONS.RESOURCES));
      const resources = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as Resource));
      console.log(`‚úÖ ${resources.length} recursos carregados`);
      return resources;
    } catch (error) {
      console.error('‚ùå Erro ao carregar recursos:', error);
      return [];
    }
  },

  async create(resource: Omit<Resource, 'id'>): Promise<string> {
    try {
      console.log('üìÅ Criando recurso:', resource.title);
      const docRef = await addDoc(collection(db, COLLECTIONS.RESOURCES), {
        ...resource,
        createdAt: serverTimestamp()
      });
      console.log('‚úÖ Recurso criado com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar recurso:', error);
      throw error;
    }
  },

  async delete(id: string): Promise<void> {
    try {
      console.log('üìÅ Deletando recurso:', id);
      await deleteDoc(doc(db, COLLECTIONS.RESOURCES, id));
      console.log('‚úÖ Recurso deletado');
    } catch (error) {
      console.error('‚ùå Erro ao deletar recurso:', error);
      throw error;
    }
  }
};

// CRUD para Tickets de Suporte
export const supportTicketService = {
  async getAll(): Promise<SupportTicket[]> {
    try {
      console.log('üé´ Carregando tickets...');
      const q = query(
        collection(db, COLLECTIONS.SUPPORT_TICKETS),
        orderBy('createdAt', 'desc')
      );
      const snapshot = await getDocs(q);
      const tickets = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as SupportTicket));
      console.log(`‚úÖ ${tickets.length} tickets carregados`);
      return tickets;
    } catch (error) {
      console.error('‚ùå Erro ao carregar tickets:', error);
      return [];
    }
  },

  async create(ticket: Omit<SupportTicket, 'id'>): Promise<string> {
    try {
      console.log('üé´ Criando ticket:', ticket.subject);
      const docRef = await addDoc(collection(db, COLLECTIONS.SUPPORT_TICKETS), {
        ...ticket,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Ticket criado com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar ticket:', error);
      throw error;
    }
  },

  async update(id: string, updates: Partial<SupportTicket>): Promise<void> {
    try {
      console.log('üé´ Atualizando ticket:', id);
      const docRef = doc(db, COLLECTIONS.SUPPORT_TICKETS, id);
      await updateDoc(docRef, {
        ...updates,
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Ticket atualizado');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar ticket:', error);
      throw error;
    }
  }
};

// CRUD para Banners
export const bannerService = {
  async getAll(): Promise<Banner[]> {
    try {
      console.log('üñºÔ∏è Carregando banners...');
      const q = query(
        collection(db, COLLECTIONS.BANNERS),
        orderBy('order', 'asc')
      );
      const snapshot = await getDocs(q);
      const banners = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as Banner));
      console.log(`‚úÖ ${banners.length} banners carregados`);
      return banners;
    } catch (error) {
      console.error('‚ùå Erro ao carregar banners:', error);
      return [];
    }
  },

  async create(banner: Omit<Banner, 'id'>): Promise<string> {
    try {
      console.log('üñºÔ∏è Criando banner:', banner.title);
      const docRef = await addDoc(collection(db, COLLECTIONS.BANNERS), {
        ...banner,
        createdAt: serverTimestamp()
      });
      console.log('‚úÖ Banner criado com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar banner:', error);
      throw error;
    }
  },

  async update(id: string, updates: Partial<Banner>): Promise<void> {
    try {
      console.log('üñºÔ∏è Atualizando banner:', id);
      const docRef = doc(db, COLLECTIONS.BANNERS, id);
      await updateDoc(docRef, updates);
      console.log('‚úÖ Banner atualizado');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar banner:', error);
      throw error;
    }
  },

  async delete(id: string): Promise<void> {
    try {
      console.log('üñºÔ∏è Deletando banner:', id);
      await deleteDoc(doc(db, COLLECTIONS.BANNERS, id));
      console.log('‚úÖ Banner deletado');
    } catch (error) {
      console.error('‚ùå Erro ao deletar banner:', error);
      throw error;
    }
  }
};

// CRUD para Notifica√ß√µes Fixas
export const fixedNotificationService = {
  async getAll(): Promise<FixedNotification[]> {
    try {
      console.log('üì¢ Carregando notifica√ß√µes fixas...');
      const snapshot = await getDocs(collection(db, COLLECTIONS.FIXED_NOTIFICATIONS));
      const notifications = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as FixedNotification));
      console.log(`‚úÖ ${notifications.length} notifica√ß√µes fixas carregadas`);
      return notifications;
    } catch (error) {
      console.error('‚ùå Erro ao carregar notifica√ß√µes fixas:', error);
      return [];
    }
  },

  async create(notification: Omit<FixedNotification, 'id'>): Promise<string> {
    try {
      console.log('üì¢ Criando notifica√ß√£o fixa:', notification.title);
      const docRef = await addDoc(collection(db, COLLECTIONS.FIXED_NOTIFICATIONS), {
        ...notification,
        createdAt: serverTimestamp()
      });
      console.log('‚úÖ Notifica√ß√£o fixa criada com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar notifica√ß√£o fixa:', error);
      throw error;
    }
  },

  async update(id: string, updates: Partial<FixedNotification>): Promise<void> {
    try {
      console.log('üì¢ Atualizando notifica√ß√£o fixa:', id);
      const docRef = doc(db, COLLECTIONS.FIXED_NOTIFICATIONS, id);
      await updateDoc(docRef, updates);
      console.log('‚úÖ Notifica√ß√£o fixa atualizada');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar notifica√ß√£o fixa:', error);
      throw error;
    }
  },

  async delete(id: string): Promise<void> {
    try {
      console.log('üì¢ Deletando notifica√ß√£o fixa:', id);
      await deleteDoc(doc(db, COLLECTIONS.FIXED_NOTIFICATIONS, id));
      console.log('‚úÖ Notifica√ß√£o fixa deletada');
    } catch (error) {
      console.error('‚ùå Erro ao deletar notifica√ß√£o fixa:', error);
      throw error;
    }
  }
};

// CRUD para Sess√µes de Usu√°rio
export const userSessionService = {
  async getAll(): Promise<UserSession[]> {
    try {
      console.log('üîê Carregando sess√µes...');
      const snapshot = await getDocs(collection(db, COLLECTIONS.USER_SESSIONS));
      const sessions = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as UserSession));
      console.log(`‚úÖ ${sessions.length} sess√µes carregadas`);
      return sessions;
    } catch (error) {
      console.error('‚ùå Erro ao carregar sess√µes:', error);
      return [];
    }
  },

  async create(session: Omit<UserSession, 'id'>): Promise<string> {
    try {
      console.log('üîê Criando sess√£o...');
      const docRef = await addDoc(collection(db, COLLECTIONS.USER_SESSIONS), {
        ...session,
        loginTime: serverTimestamp(),
        lastActivity: serverTimestamp()
      });
      console.log('‚úÖ Sess√£o criada com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar sess√£o:', error);
      throw error;
    }
  },

  async update(id: string, updates: Partial<UserSession>): Promise<void> {
    try {
      console.log('üîê Atualizando sess√£o:', id);
      const docRef = doc(db, COLLECTIONS.USER_SESSIONS, id);
      await updateDoc(docRef, {
        ...updates,
        lastActivity: serverTimestamp()
      });
      console.log('‚úÖ Sess√£o atualizada');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar sess√£o:', error);
      throw error;
    }
  }
};

// CRUD para Logs de Seguran√ßa
export const securityLogService = {
  async getAll(): Promise<SecurityLog[]> {
    try {
      console.log('üõ°Ô∏è Carregando logs de seguran√ßa...');
      const q = query(
        collection(db, COLLECTIONS.SECURITY_LOGS),
        orderBy('timestamp', 'desc'),
        limit(200) // Limitar para performance
      );
      const snapshot = await getDocs(q);
      const logs = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      } as SecurityLog));
      console.log(`‚úÖ ${logs.length} logs de seguran√ßa carregados`);
      return logs;
    } catch (error) {
      console.error('‚ùå Erro ao carregar logs de seguran√ßa:', error);
      return [];
    }
  },

  async create(log: Omit<SecurityLog, 'id'>): Promise<string> {
    try {
      console.log('üõ°Ô∏è Criando log de seguran√ßa...');
      const docRef = await addDoc(collection(db, COLLECTIONS.SECURITY_LOGS), {
        ...log,
        timestamp: serverTimestamp()
      });
      console.log('‚úÖ Log de seguran√ßa criado com ID:', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar log de seguran√ßa:', error);
      throw error;
    }
  }
};

// Fun√ß√£o para escutar mudan√ßas em tempo real
export const subscribeToCollection = (
  collectionName: string,
  callback: (data: any[]) => void,
  queryConstraints: any[] = []
) => {
  try {
    console.log(`üîÑ Configurando listener para ${collectionName}...`);
    
    let q;
    if (queryConstraints.length > 0) {
      q = query(collection(db, collectionName), ...queryConstraints);
    } else {
      // Configura√ß√µes espec√≠ficas para cada cole√ß√£o
      switch (collectionName) {
        case COLLECTIONS.NOTIFICATIONS:
          q = query(
            collection(db, collectionName),
            orderBy('createdAt', 'desc'),
            limit(100)
          );
          break;
        case COLLECTIONS.SECURITY_LOGS:
          q = query(
            collection(db, collectionName),
            orderBy('timestamp', 'desc'),
            limit(200)
          );
          break;
        case COLLECTIONS.BANNERS:
          q = query(
            collection(db, collectionName),
            orderBy('order', 'asc')
          );
          break;
        case COLLECTIONS.SUPPORT_TICKETS:
          q = query(
            collection(db, collectionName),
            orderBy('createdAt', 'desc')
          );
          break;
        case COLLECTIONS.WATCH_HISTORY:
          q = query(
            collection(db, collectionName),
            orderBy('lastWatchedAt', 'desc')
          );
          break;
        case COLLECTIONS.FAVORITES:
          q = query(
            collection(db, collectionName),
            orderBy('addedAt', 'desc')
          );
          break;
        default:
          q = collection(db, collectionName);
      }
    }
    
    return onSnapshot(q, (snapshot) => {
      const data = snapshot.docs.map(doc => ({
        id: doc.id,
        ...convertFirestoreData(doc.data())
      }));
      console.log(`üìä ${collectionName} atualizado: ${data.length} itens`);
      callback(data);
    }, (error) => {
      console.error(`‚ùå Erro no listener de ${collectionName}:`, error);
    });
  } catch (error) {
    console.error(`‚ùå Erro ao configurar listener para ${collectionName}:`, error);
    return () => {}; // Retorna fun√ß√£o vazia em caso de erro
  }
};